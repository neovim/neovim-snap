name: nvim
base: core22
adopt-info: nvim
summary: Vim-fork focused on extensibility and agility.
architectures:
  - build-on: s390x
  - build-on: ppc64el
  - build-on: arm64
  - build-on: armhf
  - build-on: amd64
  - build-on: i386
description: |
 Neovim is a project that seeks to aggressively refactor Vim in order to:

 Simplify maintenance and encourage contributions Split the work between
 multiple developers Enable the implementation of new/modern user interfaces
 without any modifications to the core source Improve extensibility with a new
 plugin architecture For lots more details, see the wiki!

grade: stable  # must be 'stable' to release into candidate/stable channels
confinement: classic

apps:
  nvim:
    command: usr/bin/nvim
    command-chain:
      - bin/nvim-wrapper
    environment:
      HOME: /home/$USER
      VIM: $SNAP/usr/share/nvim
      VIMRUNTIME: $SNAP/usr/share/nvim/runtime
    desktop: usr/share/applications/nvim.desktop

parts:
  nvim:
    source: https://github.com/neovim/neovim.git
    override-pull: |
      craftctl default
      branch="stable"
      git checkout tags/${branch} -b ${branch}
      major="$(awk '/NVIM_VERSION_MAJOR/{gsub(")","",$2); print $2}' CMakeLists.txt)"
      minor="$(awk '/NVIM_VERSION_MINOR/{gsub(")","",$2); print $2}' CMakeLists.txt)"
      patch="$(awk '/NVIM_VERSION_PATCH/{gsub(")","",$2); print $2}' CMakeLists.txt)"
      version="v$major.$minor.$patch"
      craftctl set version="${version}"
    plugin: make
    override-build: |
      echo "Building on $SNAP_ARCH"
      set -x
      case "$SNAP_ARCH" in
         "ppc64el"  | "s390x")
        make -j"${SNAPCRAFT_PARALLEL_BUILD_COUNT}" \
          CMAKE_BUILD_TYPE=RelWithDebInfo \
          CMAKE_INSTALL_PREFIX=/usr \
          CMAKE_FLAGS=-DPREFER_LUA=ON \
          DEPS_CMAKE_FLAGS="-DUSE_BUNDLED_LUA=ON -DUSE_BUNDLED_LUAJIT=OFF"
        ;;
        *)
        make -j"${SNAPCRAFT_PARALLEL_BUILD_COUNT}" \
          CMAKE_BUILD_TYPE=RelWithDebInfo \
          CMAKE_INSTALL_PREFIX=/usr
        ;;
      esac
      make DESTDIR="$SNAPCRAFT_PART_INSTALL" install
      # Fix Desktop file
      sed -i 's|^Exec=nvim|Exec=/snap/bin/nvim.nvim|' \
        ${SNAPCRAFT_PART_INSTALL}/usr/share/applications/nvim.desktop
      sed -i 's|^TryExec=nvim|TryExec=/snap/bin/nvim.nvim|' \
        ${SNAPCRAFT_PART_INSTALL}/usr/share/applications/nvim.desktop
      sed -i 's|^Icon=.*|Icon=${SNAP}/usr/share/icons/hicolor/128x128/apps/nvim.png|' \
        ${SNAPCRAFT_PART_INSTALL}/usr/share/applications/nvim.desktop
    build-packages:
      - ninja-build
      - libtool
      - libtool-bin
      - autoconf
      - automake
      - cmake
      - gawk
      - g++
      - git
      - gettext
      - pkg-config
      - unzip
      - wget
    prime:
      - -usr/share/man
  nvim-wrapper:
    plugin: dump
    after:
      - nvim
    source: snap/local/
    organize:
      nvim-wrapper: bin/
  treesitter-parsers:
    plugin: nil
    after:
      - nvim
    override-build: |
      mkdir -p ~/.local/share/nvim/site/pack/nvim-treesitter/start
      git clone https://github.com/nvim-treesitter/nvim-treesitter ~/.local/share/nvim/site/pack/nvim-treesitter/start/nvim-treesitter
      mkdir -p ~/.local/share/nvim/site/pack/plenary.nvim/start
      git clone https://github.com/nvim-lua/plenary.nvim ~/.local/share/nvim/site/pack/plenary.nvim/start/plenary.nvim
      $CRAFT_STAGE/usr/bin/nvim --headless -c "TSInstallSync all" -c "q"
      parser_dest="$CRAFT_PART_INSTALL/usr/share/nvim/runtime/parser/"
      mkdir -p "$parser_dest"
      cp ~/.local/share/nvim/site/pack/nvim-treesitter/start/nvim-treesitter/parser/* "$parser_dest"
  patchelf:
    after:
      - treesitter-parsers
    plugin: nil
    build-packages:
      - patchelf
      - file
    override-prime: |
      # patchelf
      #
      # To allow for a classic snap that works across multiple operating system
      # runtime environments, we need to ensure all shipped binaries consume
      # libraries from the core or shipped snap.  We accomplish this by
      # patching RPATH or interpreter into dynamically linked binaries.
      #
      # /snap/core22/current/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
      # /snap/core22/current/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1
      # /snap/core22/current/lib/powerpc64le-linux-gnu/ld64.so.2
      # /snap/core22/current/lib/s390x-linux-gnu/ld64.so.1
      interp_prefix=/snap/core22/current/lib/$CRAFT_ARCH_TRIPLET
      ld_arch=$(echo $CRAFT_TARGET_ARCH | sed -e 's,amd64,x86-64,' -e 's,arm64,aarch64,')
      for interp in "ld-linux-${ld_arch}.so.?" "ld64.so.?" "/dev/null"; do
          if [ -e ${interp_prefix}/${interp} ]; then
              break
          fi
      done
      if [ $interp = /dev/null ]; then
          echo "Unable to determine name of shared library interpreter."
          exit 1
      fi
      for binary in \
        $(find . -exec file {} \; | awk -F\: '/ELF.*dynamic/{print$1}'); do
          patchelf \
              --force-rpath \
              --set-rpath /snap/core22/current/usr/lib/$CRAFT_ARCH_TRIPLET:/snap/$CRAFT_PROJECT_NAME/current/lib:/snap/$CRAFT_PROJECT_NAME/current/lib/$SNAPCRAFT_ARCH_TRIPLET:/snap/$CRAFT_PROJECT_NAME/current/usr/lib:/snap/$CRAFT_PROJECT_NAME/current/usr/lib/$SNAPCRAFT_ARCH_TRIPLET \
              $binary
          echo "Patching: $binary with $interp_prefix/$interp"
          patchelf --set-interpreter $interp_prefix/$interp $binary || true
      done
